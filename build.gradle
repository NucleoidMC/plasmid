plugins {
  id 'fabric-loom' version '0.5-SNAPSHOT'
  id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

// check if we're in a ci environment
if (System.getenv("BUILD_NUMBER")) {
  def ci_version = read_ci_version()
  if (ci_version) {
    version = "$ci_version.major.$ci_version.minor.$ci_version.patch"
  }
} else {
  version = "$version+local"
}

minecraft {
  accessWidener = file("src/main/resources/plasmid.accesswidener")
}

repositories {
  maven { url = "https://jitpack.io/" }
  maven { url = "https://maven.gegy.dev/" }
}

dependencies {
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
  modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

  modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

  implementation 'com.google.code.findbugs:jsr305:3.0.1'

  modRuntime("com.github.SuperCoder7979:databreaker:0.2.6") {
    exclude module: "fabric-loader"
  }
}

processResources {
  inputs.property "version", project.version

  from(sourceSets.main.resources.srcDirs) {
    include "fabric.mod.json"
    expand "version": project.version
  }

  from(sourceSets.main.resources.srcDirs) {
    exclude "fabric.mod.json"
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}

jar {
  from "LICENSE"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact(remapJar) {
        builtBy remapJar
      }
      artifact(sourcesJar) {
        builtBy remapSourcesJar
      }
    }
  }

  repositories {
    if (project.hasProperty("mavenUrl")) {
      maven {
        credentials {
          username project.mavenUsername ?: ""
          password project.mavenPassword ?: ""
        }
        url project.mavenUrl ?: ""
      }
    } else {
      mavenLocal()
    }
  }
}

import groovy.json.*

def get_base_version() {
  def version = project.mod_version.split('\\.')
  return [
      major: version[0] ?: 0,
      minor: version[1] ?: 0,
      patch: 0
  ]
}

static def read_ci_version() {
  def file = new File("ci_version.json")

  if (file.exists()) {
    def json = new JsonSlurper().parseText(file.text)
    return json
  }

  return null
}

static def write_ci_version(version) {
  def file = new File("ci_version.json")
  file.write JsonOutput.toJson(version)
}

task incrementCiVersion {
  doLast {
    def base_version = get_base_version()
    def old_version = read_ci_version()
    def new_version = old_version

    if (!old_version || old_version.major != base_version.major || old_version.minor != base_version.minor) {
      // the base version changed! reset our ci version to match
      new_version = base_version
    } else {
      // the base version hasn't changed: increment patch version
      new_version.patch += 1
    }

    println "incrementing version from $old_version to $new_version!"

    write_ci_version(new_version)
  }
}
