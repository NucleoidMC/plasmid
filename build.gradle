plugins {
  id 'fabric-loom' version '0.8-SNAPSHOT'
  id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
group = project.maven_group

def env = System.getenv()

def build_number = env.BUILDNUM_FOR_VERSION

version = project.mod_version

if (!project.prerelease) {
  if (build_number) {
    version += ".$build_number"
  }
} else {
  version += "-pre${build_number ?: ''}"
}

version += "+${project.minecraft_version}"
if (!build_number) {
  version += "-local"
}

minecraft {
  accessWidener = file("src/main/resources/plasmid.accesswidener")
}

repositories {
  maven { url = "https://maven.nucleoid.xyz/" }
  maven { url = "https://maven.gegy.dev/" }
}

dependencies {
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
  modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

  modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

  modImplementation include('fr.catcore:server-translations-api:1.4.5+1.17')
  modImplementation include('xyz.nucleoid:packet-tweaker:0.2.0+1.17.1')
  modImplementation include('xyz.nucleoid:fantasy:0.4.2+1.17')
  modImplementation include('xyz.nucleoid:more-codecs:0.1.5')
  modImplementation include('xyz.nucleoid:stimuli:0.2.4+1.17.1')
  modImplementation include('xyz.nucleoid:map-templates:0.1.0+1.17.1')
  modImplementation include('eu.pb4:polymer:0.1.0-rc.2+1.17.1')
  modImplementation include('eu.pb4:hologram-api:0.2.0+1.17.1')
  modImplementation include('eu.pb4:sgui:1.0.0-rc3-1.17.1')
  modImplementation include('eu.pb4:sidebar-api:0.1.0-rc.3+1.17.1')

  modRuntime("supercoder79:databreaker:0.2.7") {
    exclude module: "fabric-loader"
  }

  modCompileOnly('xyz.nucleoid:disguiselib-fabric:1.0.4')
}

processResources {
  inputs.property "version", project.version

  filesMatching("fabric.mod.json") {
    expand "version": project.version
  }
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
  it.options.release = 16
}

java {
  withSourcesJar()
}

jar {
  from("LICENSE") {
    rename { "${it}_${project.archivesBaseName}"}
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact(remapJar) {
        builtBy remapJar
      }
      artifact(sourcesJar) {
        builtBy remapSourcesJar
      }
    }
  }

  repositories {
    if (env.MAVEN_URL) {
      maven {
        credentials {
          username env.MAVEN_USERNAME
          password env.MAVEN_PASSWORD
        }
        url env.MAVEN_URL
      }
    } else {
      mavenLocal()
    }
  }
}
